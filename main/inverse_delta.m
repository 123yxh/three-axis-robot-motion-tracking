function [theta1, theta2, theta3, B, A, C, PB] = inverse_delta(p, R, r, l1, l2)
% 函数名称: inverse_delta
% 输入参数:
% - p: 动平台的位置
% - R: 定平台的半径
% - r: 动平台的半径
% - l1: 连杆的长度
% - l2: 动平台与连杆铰接点之间的长度
% 输出参数:
% - theta1, theta2, theta3: 三个连杆的关节角
% - B: 计算过程中使用的一个辅助变量
% - A: 动平台三个铰接点的位置
% - C: 定平台三个铰接点的位置
% - PB: 铰接点的坐标

% 定平台三个点的坐标
R120 = RotZ(-120*pi/180);  % 生成绕z轴旋转-120度的旋转矩阵
c2 = [0; R; 0];  % 定义定平台的第二个铰接点c2的坐标
c3 = R120 * c2;  % 通过旋转矩阵，将c2旋转得到c3
c1 = R120 * c3;  % 将c3再次旋转得到c1

% 动平台三个点的坐标（已知位置p后）
aa2 = [0; r; 0];  % 定义动平台第二个铰接点的初始坐标
aa3 = R120 * aa2;  % 通过旋转矩阵，将aa2旋转得到aa3
aa1 = R120 * aa3;  % 将aa3再次旋转得到aa1

% 定义三个单位向量，分别指向c1、c2、c3方向
s2 = [1; 0; 0];  % s2向量
s3 = R120 * s2;  % 将s2旋转得到s3
s1 = R120 * s3;  % 将s3再次旋转得到s1

% 已知动平台的位置后，计算动平台三个铰接点的位置
a1 = aa1 + p;  % 动平台第一个铰接点a1的坐标
a2 = aa2 + p;  % 动平台第二个铰接点a2的坐标
a3 = aa3 + p;  % 动平台第三个铰接点a3的坐标

% 计算铰接点的投影，确保其在指定方向上的投影满足条件
A1 = a1 - a1' * s1 * s1;  % 计算a1在方向s1上的投影
A2 = a2 - a2' * s2 * s2;  % 计算a2在方向s2上的投影
A3 = a3 - a3' * s3 * s3;  % 计算a3在方向s3上的投影

% 计算每个连杆的实际长度
l21 = sqrt(l2^2 - (a1' * s1)^2);  % 第一个连杆的长度
l22 = sqrt(l2^2 - (a2' * s2)^2);  % 第二个连杆的长度
l23 = sqrt(l2^2 - (a3' * s3)^2);  % 第三个连杆的长度

l31 = norm(A1 - c1);  % 铰接点A1到c1的距离
l32 = norm(A2 - c2);  % 铰接点A2到c2的距离
l33 = norm(A3 - c3);  % 铰接点A3到c3的距离

A = [a1 a2 a3];  % 将动平台铰接点的坐标保存到矩阵A中
C = [c1 c2 c3];  % 将定平台铰接点的坐标保存到矩阵C中

% 检查每个连杆和铰接点之间的几何关系，确保满足三角不等式
if l21 + l1 >= l31 && l21 + l31 >= l1 && l31 + l1 >= l21 && ...
   l22 + l1 >= l32 && l22 + l32 >= l1 && l32 + l1 >= l22 && ...
   l23 + l1 >= l33 && l23 + l33 >= l1 && l33 + l1 >= l23  % 三角不等式验证

    % 计算每个连杆的角度theta
    theta1_a = acos((l1^2 + l31^2 - l21^2) / (2 * l1 * l31)) * 180 / pi;  % theta1的角度
    theta2_a = acos((l1^2 + l32^2 - l22^2) / (2 * l1 * l32)) * 180 / pi;  % theta2的角度
    theta3_a = acos((l1^2 + l33^2 - l23^2) / (2 * l1 * l33)) * 180 / pi;  % theta3的角度

    % 计算每个铰接点相对于z轴的角度
    theta1_b = acos((A1 - c1)' * [0; 0; -1] / norm((A1 - c1))) * 180 / pi * (A1 - c1)' * c1 / abs((A1 - c1)' * c1);
    theta2_b = acos((A2 - c2)' * [0; 0; -1] / norm((A2 - c2))) * 180 / pi * (A2 - c2)' * c2 / abs((A2 - c2)' * c2);
    theta3_b = acos((A3 - c3)' * [0; 0; -1] / norm((A3 - c3))) * 180 / pi * (A3 - c3)' * c3 / abs((A3 - c3)' * c3);

    % 最终得到三个连杆的角度theta1, theta2, theta3
    theta1 = theta1_a + theta1_b;
    theta2 = theta2_a + theta2_b;
    theta3 = theta3_a + theta3_b;

    % 计算动平台铰接点B1, B2, B3的位置
    B1 = RotZ(120 * pi / 180) * [0; l1 * sind(theta1); -l1 * cosd(theta1)] + c1;
    B2 = [0; l1 * sind(theta2); -l1 * cosd(theta2)] + c2;
    B3 = RotZ(-120 * pi / 180) * [0; l1 * sind(theta3); -l1 * cosd(theta3)] + c3;

    % 取B1, B2, B3中z轴最小的值作为B
    B = min([B1(3), B2(3), B3(3)]);
    PB = [B1 B2 B3];  % 将B1, B2, B3的坐标保存到PB中

    % 验证计算的连杆长度是否满足要求，确保反解正确
    if norm(B1 - a1) - l2 > 0.0001 || norm(B2 - a2) - l2 > 0.0001 || norm(B3 - a3) - l2 > 0.0001
        disp("程序出错！");  % 输出错误提示
        disp(p);  % 打印出当前动平台的位置p
    end
else
    % 如果不满足三角不等式，设置角度和B为无穷大
    theta1 = inf;
    theta2 = inf;
    theta3 = inf;
    B = inf;
    PB = inf;
end
end


% 
% 这段代码是一个MATLAB函数，用于进行三角形平面机构的反解计算。以下是对函数中各部分的解释：
% 
% 输入参数：
% p: 动平台的位置，为一个3维向量，表示动平台在全局坐标系下的位置。
% R: 动平台的半径，为一个标量，表示动平台的半径长度。
% r: 平台固定铰链点到动平台铰链点的距离，为一个标量。
% l1: 平台固定铰链点到动平台铰链点的连杆长度，为一个标量。
% l2: 平台铰链点到机构固定铰链点的连杆长度，为一个标量。
% 功能：
% 根据输入的参数计算三个铰链点的位置，并进行一系列判断和计算。
% 当满足三角形两边之和大于第三边的条件时，计算三个铰链点的角度(theta1, theta2, theta3)和高度(B)，以及铰链点的坐标(PB)。
% 当不满足条件时，将角度和高度设为无穷大(inf)。
% 输出参数：
% theta1, theta2, theta3: 分别表示三个铰链点的角度，单位为度。
% B: 动平台中心点到底座的高度，即动平台的高度，单位为长度。
% A: 动平台三个铰链点的坐标，为一个3x3矩阵，其中每一列表示一个铰链点的坐标。
% C: 机构固定铰链点的坐标，为一个3x3矩阵，其中每一列表示一个铰链点的坐标。
% PB: 三个铰链点的坐标，为一个3x3矩阵，其中每一列表示一个铰链点的坐标，用于判断机构反解是否有误。
% 函数内部实现：
% 通过旋转矩阵和输入参数计算动平台三个铰链点的坐标和连杆长度。
% 根据三角形两边之和大于第三边的条件进行判断，计算角度(theta1, theta2, theta3)和高度(B)。
% 利用旋转矩阵和三角函数计算角度(theta1_a, theta2_a, theta3_a)。
% 利用向量点乘和旋转矩阵计算角度(theta1_b, theta2_b, theta3_b)。
% 利用最小高度的点作为动平台的高度(B)。
% 判断机构反解是否有误，如果有误则输出错误信息。如果没有误，则输出计算结果。
% 
% 这段 MATLAB 代码实现了一个用于计算并返回反解角度的函数 inverse_delta。该函数的输入参数包括：动平台位置参数 p，固定平台半径 R，动平台半径 r，两个连杆的长度 l1 和 l2。函数的输出参数包括：三个关节角度 theta1、theta2 和 theta3，动平台与固定平台的最低位置 B，动平台三个铰接点的坐标 A，固定平台三个铰接点的坐标 C，以及动平台三个铰接点的投影坐标 PB。
% 
% 在函数的实现中，首先根据输入参数计算动平台三个铰接点的位置 a1、a2 和 a3。然后，根据固定平台和动平台的坐标关系，计算动平台三个铰接点在固定平台坐标系下的投影坐标 A1、A2 和 A3。接着，计算动平台三个铰接点到固定平台三个铰接点的距离 l31、l32 和 l33。通过判断三角形的边长之和是否大于第三边，来检验是否存在有效解。
% 
% 如果存在有效解，则分别计算三个关节角度 theta1、theta2 和 theta3。其中，theta1_a、theta2_a 和 theta3_a 分别通过余弦定理计算得出，表示与固定平台的角度。theta1_b、theta2_b 和 theta3_b 分别通过向量的内积和反三角函数计算得出，表示与动平台的角度。最终，将两部分角度相加，得到最终的关节角度。
% 
% 接着，根据关节角度计算动平台三个铰接点的位置 B1、B2 和 B3，以及它们的最低位置 B。最后，将动平台三个铰接点的坐标存储在矩阵 PB 中，并通过判断计算得到的铰接点坐标与输入参数的关系，来检查反解是否出错。
% 
% 如果不存在有效解，则将关节角度和铰接点位置设置为无穷大，表示无解。










