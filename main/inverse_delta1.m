function [theta1,theta2,theta3,B,A,C,PB] = inverse_delta1(p,R,r,l1,l2)
%定平台三个点的坐标
R120 = rotz(-120*pi/180);
c2 = [0;R;0];
c3 = R120*c2;
c1 = R120*c3;

aa2 = [0;r;0];
aa3 = R120*aa2;
aa1 = R120*aa3;
s2 = [1;0;0];
s3 = R120*s2;
s1 = R120*s3;

%已知动平台的位置后，计算动平台三个铰接点位置
a1 = aa1+p;
a2 = aa2+p;
a3 = aa3+p;

%将铰接点投影在这个

A1 = a1-a1'*s1*s1;
A2 = a2-a2'*s2*s2;
A3 = a3-a3'*s3*s3;
l21 = sqrt(l2^2-(a1'*s1)^2);
l22 = sqrt(l2^2-(a2'*s2)^2);
l23 = sqrt(l2^2-(a3'*s3)^2);

l31 = norm(A1-c1);
l32 = norm(A2-c2);
l33 = norm(A3-c3);
A = [a1 a2 a3];
C = [c1 c2 c3];
if l21+l1>=l31 && l21+l31>=l1 && l31+l1>=l21 &&...
   l22+l1>=l32 && l22+l32>=l1 && l32+l1>=l22 &&...
   l23+l1>=l33 && l23+l33>=l1 && l33+l1>=l23   %需要满足三角形两边之和大于第三边

    theta1_a = acos((l1^2+l31^2-l21^2)/(2*l1*l31))*180/pi;
    theta2_a = acos((l1^2+l32^2-l22^2)/(2*l1*l32))*180/pi;
    theta3_a = acos((l1^2+l33^2-l23^2)/(2*l1*l33))*180/pi;
    
    theta1_b = acos((A1-c1)'*[0;0;-1]/norm((A1-c1)))*180/pi*(A1-c1)'*c1/abs((A1-c1)'*c1);
    theta2_b = acos((A2-c2)'*[0;0;-1]/norm((A2-c2)))*180/pi*(A2-c2)'*c2/abs((A2-c2)'*c2);
    theta3_b = acos((A3-c3)'*[0;0;-1]/norm((A3-c3)))*180/pi*(A3-c3)'*c3/abs((A3-c3)'*c3);
    
    theta1 = theta1_a+theta1_b;
    theta2 = theta2_a+theta2_b;
    theta3 = theta3_a+theta3_b;
    
    B1 = rotz(120*pi/180)*[0;l1*sind(theta1);-l1*cosd(theta1)]+c1;
    B2 = [0;l1*sind(theta2);-l1*cosd(theta2)]+c2;
    B3 = rotz(-120*pi/180)*[0;l1*sind(theta3);-l1*cosd(theta3)]+c3;
    B = min([B1(3),B2(3),B3(3)]);
    PB = [B1 B2 B3]; 
    if norm(B1-a1)-l2>0.0001 || norm(B2-a2)-l2>0.0001 || norm(B3-a3)-l2>0.0001 %主用于判断机构反解是否有误
        disp("程序出错！")
        disp(p)
    else
    end
else
    theta1 = inf;
    theta2 = inf;
    theta3 = inf;
    B = inf;
    PB = inf;
end
end

% 
% 这段代码是一个MATLAB函数，用于进行三角形平面机构的反解计算。以下是对函数中各部分的解释：
% 
% 输入参数：
% p: 动平台的位置，为一个3维向量，表示动平台在全局坐标系下的位置。
% R: 动平台的半径，为一个标量，表示动平台的半径长度。
% r: 平台固定铰链点到动平台铰链点的距离，为一个标量。
% l1: 平台固定铰链点到动平台铰链点的连杆长度，为一个标量。
% l2: 平台铰链点到机构固定铰链点的连杆长度，为一个标量。
% 功能：
% 根据输入的参数计算三个铰链点的位置，并进行一系列判断和计算。
% 当满足三角形两边之和大于第三边的条件时，计算三个铰链点的角度(theta1, theta2, theta3)和高度(B)，以及铰链点的坐标(PB)。
% 当不满足条件时，将角度和高度设为无穷大(inf)。
% 输出参数：
% theta1, theta2, theta3: 分别表示三个铰链点的角度，单位为度。
% B: 动平台中心点到底座的高度，即动平台的高度，单位为长度。
% A: 动平台三个铰链点的坐标，为一个3x3矩阵，其中每一列表示一个铰链点的坐标。
% C: 机构固定铰链点的坐标，为一个3x3矩阵，其中每一列表示一个铰链点的坐标。
% PB: 三个铰链点的坐标，为一个3x3矩阵，其中每一列表示一个铰链点的坐标，用于判断机构反解是否有误。
% 函数内部实现：
% 通过旋转矩阵和输入参数计算动平台三个铰链点的坐标和连杆长度。
% 根据三角形两边之和大于第三边的条件进行判断，计算角度(theta1, theta2, theta3)和高度(B)。
% 利用旋转矩阵和三角函数计算角度(theta1_a, theta2_a, theta3_a)。
% 利用向量点乘和旋转矩阵计算角度(theta1_b, theta2_b, theta3_b)。
% 利用最小高度的点作为动平台的高度(B)。
% 判断机构反解是否有误，如果有误则输出错误信息。如果没有误，则输出计算结果。
% 
% 这段 MATLAB 代码实现了一个用于计算并返回反解角度的函数 inverse_delta。该函数的输入参数包括：动平台位置参数 p，固定平台半径 R，动平台半径 r，两个连杆的长度 l1 和 l2。函数的输出参数包括：三个关节角度 theta1、theta2 和 theta3，动平台与固定平台的最低位置 B，动平台三个铰接点的坐标 A，固定平台三个铰接点的坐标 C，以及动平台三个铰接点的投影坐标 PB。
% 
% 在函数的实现中，首先根据输入参数计算动平台三个铰接点的位置 a1、a2 和 a3。然后，根据固定平台和动平台的坐标关系，计算动平台三个铰接点在固定平台坐标系下的投影坐标 A1、A2 和 A3。接着，计算动平台三个铰接点到固定平台三个铰接点的距离 l31、l32 和 l33。通过判断三角形的边长之和是否大于第三边，来检验是否存在有效解。
% 
% 如果存在有效解，则分别计算三个关节角度 theta1、theta2 和 theta3。其中，theta1_a、theta2_a 和 theta3_a 分别通过余弦定理计算得出，表示与固定平台的角度。theta1_b、theta2_b 和 theta3_b 分别通过向量的内积和反三角函数计算得出，表示与动平台的角度。最终，将两部分角度相加，得到最终的关节角度。
% 
% 接着，根据关节角度计算动平台三个铰接点的位置 B1、B2 和 B3，以及它们的最低位置 B。最后，将动平台三个铰接点的坐标存储在矩阵 PB 中，并通过判断计算得到的铰接点坐标与输入参数的关系，来检查反解是否出错。
% 
% 如果不存在有效解，则将关节角度和铰接点位置设置为无穷大，表示无解。










